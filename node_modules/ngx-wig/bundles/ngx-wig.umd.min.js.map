{"version":3,"sources":["../../projects/ngx-wig/src/lib/config.ts","../../projects/ngx-wig/src/lib/ngx-wig-toolbar.service.ts","../../projects/ngx-wig/src/lib/ngx-wig.component.ts","../../projects/ngx-wig/src/lib/ngx-wig.module.ts"],"names":["DEFAULT_LIBRARY_BUTTONS","list1","label","title","command","styleClass","icon","list2","bold","italic","link","underline","CUSTOM_LIBRARY_BUTTONS","edithtml","ctx","editMode","BUTTONS","InjectionToken","NgxWigToolbarService","buttonLibraryConfig","this","_defaultButtonsList","_buttonLibrary","reduce","acc","val","Object","assign","keys","prototype","setButtons","buttons","Array","isArray","Error","addStandardButton","name","push","getToolbarButtons","buttonsList","_this","toolbarButtons","split","map","Function","call","String","trim","forEach","buttonKey","button","Injectable","args","providedIn","Inject","NgxWigComponent","_ngWigToolbarService","document","window","contentChange","EventEmitter","hasFocus","propagateChange","_","propagateTouched","execCommand","options","queryCommandSupported","prompt","container","focus","selection","getSelection","toString","onContentChange","innerHTML","ngOnInit","ngxWigEditable","nativeElement","content","ngAfterViewInit","_mutationObserver","MutationObserver","observe","childList","subtree","characterData","ngOnDestroy","disconnect","newContent","emit","ngOnChanges","changes","pasteHtmlAtCaret","currentValue","onTextareaChange","writeValue","value","shouldShowPlaceholder","placeholder","innerText","html","sel","range","getRangeAt","rangeCount","deleteContents","el","createElement","frag","createDocumentFragment","node","lastNode","firstChild","appendChild","insertNode","cloneRange","setStartAfter","collapse","removeAllRanges","addRange","registerOnChange","fn","registerOnTouched","onBlur","setDisabledState","isDisabled","disabled","getWindowObject","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","encapsulation","ViewEncapsulation","None","DOCUMENT","Input","Output","ViewChild","read","ElementRef","static","NgxWigModule","forRoot","config","ngModule","useValue","buttonsConfig","useFactory","forChild","NgModule","declarations","imports","CommonModule","FormsModule","exports","Éµ0$1"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NgxWigComponent } from './ngx-wig.component';\n\nexport type commandFunction = (ctx: NgxWigComponent) => void;\n\nexport interface TButton {\n  label?: string;\n  icon?: string;\n  title?: string;\n  command?: string | commandFunction;\n  styleClass?: string;\n}\n\nexport interface TButtonLibrary {\n  [name: string]: TButton;\n}\n\nexport const DEFAULT_LIBRARY_BUTTONS: TButtonLibrary = {\n  list1: {\n    label: 'UL',\n    title: 'Unordered List',\n    command: 'insertunorderedlist',\n    styleClass: 'list-ul',\n    icon: 'icon-list-ul'\n  },\n  list2: {\n    label: 'OL',\n    title: 'Ordered List',\n    command: 'insertorderedlist',\n    styleClass: 'list-ol',\n    icon: 'icon-list-ol'\n  },\n  bold: {\n    label: 'B',\n    title: 'Bold',\n    command: 'bold',\n    styleClass: 'bold',\n    icon: 'icon-bold'\n  },\n  italic: {\n    label: 'I',\n    title: 'Italic',\n    command: 'italic',\n    styleClass: 'italic',\n    icon: 'icon-italic'\n  },\n  link: {\n    label: 'Link',\n    title: 'Link',\n    command: 'createlink',\n    styleClass: 'link',\n    icon: 'icon-link'\n  },\n  underline: {\n    label: 'U',\n    title: 'Underline',\n    command: 'underline',\n    styleClass: 'format-underlined',\n    icon: 'icon-underline'\n  }\n};\n\nexport const CUSTOM_LIBRARY_BUTTONS: TButtonLibrary = {\n  edithtml: {\n    label: 'Edit HTML',\n    title: 'Edit HTML',\n    command: (ctx: NgxWigComponent) => {\n      ctx.editMode = !ctx.editMode;\n    },\n    styleClass: 'nw-button--source',\n    icon: '',\n  }\n};\n\n\nexport const BUTTONS = new InjectionToken<TButton[][]>('BUTTONS');\n","import { Injectable, Inject } from '@angular/core';\nimport { TButtonLibrary, TButton, BUTTONS } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxWigToolbarService {\n  private _defaultButtonsList: string[] = [];\n  private _buttonLibrary: TButtonLibrary;\n\n  constructor(@Inject(BUTTONS) buttonLibraryConfig: TButtonLibrary[]) {\n    this._buttonLibrary = buttonLibraryConfig.reduce((acc: TButtonLibrary, val: TButtonLibrary) => ({ ...acc, ...val }), {});\n    this._defaultButtonsList = Object.keys(this._buttonLibrary);\n  }\n\n  public setButtons(buttons: string[]): void {\n    if (!Array.isArray(buttons)) {\n      throw new Error('Argument \"buttons\" should be an array');\n    }\n\n    this._defaultButtonsList = buttons;\n  }\n\n  public addStandardButton(\n    name: string,\n    title: string,\n    command: string,\n    styleClass: string,\n    icon: string\n  ) {\n    if (!name || !title || !command) {\n      throw new Error('Arguments \"name\", \"title\" and \"command\" are required');\n    }\n\n    styleClass = styleClass || '';\n    this._buttonLibrary[name] = { title, command, styleClass, icon };\n    this._defaultButtonsList.push(name);\n  }\n\n  public getToolbarButtons(buttonsList?: string): {}[] {\n    let buttons = this._defaultButtonsList;\n    const toolbarButtons: TButton[] = [];\n\n    if (typeof buttonsList !== 'undefined') {\n      buttons = string2array(buttonsList);\n    }\n\n    buttons.forEach(buttonKey => {\n      if (!buttonKey) {\n        return;\n      }\n\n      if (!this._buttonLibrary[buttonKey]) {\n        throw new Error(\n          `There is no \"${buttonKey}\" in your library. Possible variants: ${Object.keys(this._buttonLibrary)}`\n        );\n      }\n\n      const button = Object.assign({}, this._buttonLibrary[buttonKey]);\n      // button.isActive = () => {return !!this.command && document.queryCommandState(this.command);}\n      toolbarButtons.push(button);\n    });\n\n    return toolbarButtons;\n  }\n}\n\nfunction string2array(keysString: string) {\n  return keysString\n    .split(',')\n    .map(Function.prototype.call, String.prototype.trim);\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\n\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { NgxWigToolbarService } from './ngx-wig-toolbar.service';\nimport { DOCUMENT } from '@angular/common';\nimport { TButton, commandFunction } from './config';\n\n/** @dynamic */\n@Component({\n  selector: 'ngx-wig',\n  templateUrl: './ngx-wig-component.html',\n  styleUrls: ['./ngx-wig-component.css'],\n  providers: [\n    NgxWigToolbarService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxWigComponent),\n      multi: true\n    }\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NgxWigComponent implements AfterViewInit,\n                                        OnInit,\n                                        OnChanges,\n                                        OnDestroy,\n                                        ControlValueAccessor {\n\n  @Input()\n  public content: string;\n\n  @Input()\n  public placeholder: string;\n\n  @Input()\n  public buttons: string;\n\n  @Input()\n  public disabled: boolean;\n\n  @Output()\n  public contentChange = new EventEmitter();\n\n  @ViewChild('ngWigEditable', { read: ElementRef, static: true })\n  public ngxWigEditable: ElementRef;\n\n  public editMode = false;\n  public container: HTMLElement;\n  public toolbarButtons: TButton[] = [];\n  public hasFocus = false;\n\n  private _mutationObserver: MutationObserver;\n\n  public constructor(\n    private _ngWigToolbarService: NgxWigToolbarService,\n    @Inject(DOCUMENT) private document: any, // cannot set Document here - Angular issue - https://github.com/angular/angular/issues/20351\n    @Inject('WINDOW') private window,\n  ) {}\n\n  public execCommand(command: string| commandFunction, options?: string): boolean {\n\n    if (typeof command === 'function') {\n      command(this);\n      return true;\n    }\n\n    if (this.editMode) {\n      return false;\n    }\n\n    if (this.document.queryCommandSupported && !this.document.queryCommandSupported(command)) {\n      throw new Error(`The command \"${command}\" is not supported`);\n    }\n    if (command === 'createlink' || command === 'insertImage') {\n      options = window.prompt('Please enter the URL', 'http://') || '';\n      if (!options) {\n        return false;\n      }\n    }\n\n    this.container.focus();\n\n    // use insertHtml for `createlink` command to account for IE/Edge purposes, in case there is no selection\n    const selection = this.document.getSelection().toString();\n\n    if (command === 'createlink' && selection === '') {\n      this.document.execCommand('insertHtml', false, '<a href=\"' + options + '\">' + options + '</a>');\n    } else {\n      this.document.execCommand(command, false, options);\n    }\n\n    this.onContentChange(this.container.innerHTML);\n    return true;\n  }\n\n  public ngOnInit(): void {\n    this.toolbarButtons = this._ngWigToolbarService.getToolbarButtons(this.buttons);\n    this.container = this.ngxWigEditable.nativeElement;\n\n    if (this.content) {\n      this.container.innerHTML = this.content;\n    }\n  }\n\n  public ngAfterViewInit(): void {\n    // Workaround for IE11 which doesn't fire 'input' event on\n    // contenteditable\n    // https://stackoverflow.com/a/49287032/7369511\n\n    // check if the browser is IE:\n    if (window.document['documentMode']) {\n      this._mutationObserver = new MutationObserver(() => {\n        this.onContentChange(this.container.innerHTML);\n      });\n\n      this._mutationObserver.observe(\n        this.container,\n        { childList: true, subtree: true, characterData: true }\n      );\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n    }\n  }\n\n  public onContentChange(newContent: string): void {\n    this.content = newContent;\n    this.contentChange.emit(this.content);\n    this.propagateChange(this.content);\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (this.container && changes['content']) {\n\n      // we need to focus the container before pasting at the caret\n      this.container.focus();\n\n      // clear the previous content\n      this.container.innerHTML = '';\n\n      // add the new content\n      this.pasteHtmlAtCaret(changes['content'].currentValue);\n    }\n  }\n\n  public onTextareaChange(newContent: string): void {\n    // model -> view\n    this.container.innerHTML = newContent;\n    this.onContentChange(newContent);\n  }\n\n  public writeValue(value: any): void {\n    if (!value) { value = ''; }\n\n    this.container.innerHTML = value;\n    this.content = value;\n  }\n\n  public shouldShowPlaceholder(): boolean {\n    return !!this.placeholder\n      && !this.container.innerText;\n  }\n\n  private pasteHtmlAtCaret(html) {\n    let sel, range;\n\n    if (window.getSelection) {\n      sel = window.getSelection();\n      if (sel.getRangeAt && sel.rangeCount) {\n        range = sel.getRangeAt(0);\n        range.deleteContents();\n\n        // append the content in a temporary div\n        const el = this.document.createElement('div');\n        el.innerHTML = html;\n\n        const frag = this.document.createDocumentFragment();\n        let node, lastNode;\n\n        while ( (node = el.firstChild) ) {\n          lastNode = frag.appendChild(node);\n        }\n        range.insertNode(frag);\n\n        // Preserve the selection\n        if (lastNode) {\n          range = range.cloneRange();\n          range.setStartAfter(lastNode);\n          range.collapse(true);\n          sel.removeAllRanges();\n          sel.addRange(range);\n        }\n      }\n    }\n  }\n\n  public registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  public registerOnTouched(fn: () => void): void {\n    this.propagateTouched = fn;\n  }\n\n  private propagateChange: any = (_: any) => { };\n  public propagateTouched = () => {};\n\n  onBlur() {\n    this.hasFocus = false;\n    this.propagateTouched();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxWigComponent } from './ngx-wig.component';\nimport { FormsModule } from '@angular/forms';\nimport { TButtonLibrary, DEFAULT_LIBRARY_BUTTONS, BUTTONS, CUSTOM_LIBRARY_BUTTONS } from './config';\n\nexport function getWindowObject(): Window {\n  return window;\n}\n\n@NgModule({\n  declarations: [\n    NgxWigComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  exports: [NgxWigComponent],\n  providers: [\n    { provide: BUTTONS, multi: true, useValue: DEFAULT_LIBRARY_BUTTONS },\n    { provide: 'WINDOW', useFactory: getWindowObject },\n  ]\n})\nexport class NgxWigModule {\n\n  static forRoot(config?: { buttonsConfig: TButtonLibrary } ): ModuleWithProviders<NgxWigModule> {\n    return {\n      ngModule: NgxWigModule,\n      providers: [\n        {\n          provide: BUTTONS,\n          multi: true, useValue: ((!config || !config?.buttonsConfig) ? DEFAULT_LIBRARY_BUTTONS : config?.buttonsConfig)\n        },\n        { provide: 'WINDOW', useFactory: getWindowObject },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders<NgxWigModule> {\n    return {ngModule: NgxWigModule };\n  }\n}\n"]}