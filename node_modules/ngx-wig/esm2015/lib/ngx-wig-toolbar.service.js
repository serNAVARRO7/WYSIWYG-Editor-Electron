import { Injectable, Inject } from '@angular/core';
import { BUTTONS } from './config';
import * as i0 from "@angular/core";
import * as i1 from "./config";
export class NgxWigToolbarService {
    constructor(buttonLibraryConfig) {
        this._defaultButtonsList = [];
        this._buttonLibrary = buttonLibraryConfig.reduce((acc, val) => (Object.assign(Object.assign({}, acc), val)), {});
        this._defaultButtonsList = Object.keys(this._buttonLibrary);
    }
    setButtons(buttons) {
        if (!Array.isArray(buttons)) {
            throw new Error('Argument "buttons" should be an array');
        }
        this._defaultButtonsList = buttons;
    }
    addStandardButton(name, title, command, styleClass, icon) {
        if (!name || !title || !command) {
            throw new Error('Arguments "name", "title" and "command" are required');
        }
        styleClass = styleClass || '';
        this._buttonLibrary[name] = { title, command, styleClass, icon };
        this._defaultButtonsList.push(name);
    }
    getToolbarButtons(buttonsList) {
        let buttons = this._defaultButtonsList;
        const toolbarButtons = [];
        if (typeof buttonsList !== 'undefined') {
            buttons = string2array(buttonsList);
        }
        buttons.forEach(buttonKey => {
            if (!buttonKey) {
                return;
            }
            if (!this._buttonLibrary[buttonKey]) {
                throw new Error(`There is no "${buttonKey}" in your library. Possible variants: ${Object.keys(this._buttonLibrary)}`);
            }
            const button = Object.assign({}, this._buttonLibrary[buttonKey]);
            // button.isActive = () => {return !!this.command && document.queryCommandState(this.command);}
            toolbarButtons.push(button);
        });
        return toolbarButtons;
    }
}
NgxWigToolbarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxWigToolbarService_Factory() { return new NgxWigToolbarService(i0.ɵɵinject(i1.BUTTONS)); }, token: NgxWigToolbarService, providedIn: "root" });
NgxWigToolbarService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgxWigToolbarService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [BUTTONS,] }] }
];
function string2array(keysString) {
    return keysString
        .split(',')
        .map(Function.prototype.call, String.prototype.trim);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXdpZy10b29sYmFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbmd4LXdpZy9zcmMvIiwic291cmNlcyI6WyJsaWIvbmd4LXdpZy10b29sYmFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUEyQixPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7OztBQUs1RCxNQUFNLE9BQU8sb0JBQW9CO0lBSS9CLFlBQTZCLG1CQUFxQztRQUgxRCx3QkFBbUIsR0FBYSxFQUFFLENBQUM7UUFJekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFtQixFQUFFLEdBQW1CLEVBQUUsRUFBRSxDQUFDLGlDQUFNLEdBQUcsR0FBSyxHQUFHLEVBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6SCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLFVBQVUsQ0FBQyxPQUFpQjtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxpQkFBaUIsQ0FDdEIsSUFBWSxFQUNaLEtBQWEsRUFDYixPQUFlLEVBQ2YsVUFBa0IsRUFDbEIsSUFBWTtRQUVaLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFdBQW9CO1FBQzNDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUN2QyxNQUFNLGNBQWMsR0FBYyxFQUFFLENBQUM7UUFFckMsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7WUFDdEMsT0FBTyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyQztRQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEtBQUssQ0FDYixnQkFBZ0IsU0FBUyx5Q0FBeUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FDckcsQ0FBQzthQUNIO1lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLCtGQUErRjtZQUMvRixjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7OztZQTdERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozt3Q0FLYyxNQUFNLFNBQUMsT0FBTzs7QUF5RDdCLFNBQVMsWUFBWSxDQUFDLFVBQWtCO0lBQ3RDLE9BQU8sVUFBVTtTQUNkLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUQnV0dG9uTGlicmFyeSwgVEJ1dHRvbiwgQlVUVE9OUyB9IGZyb20gJy4vY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4V2lnVG9vbGJhclNlcnZpY2Uge1xuICBwcml2YXRlIF9kZWZhdWx0QnV0dG9uc0xpc3Q6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgX2J1dHRvbkxpYnJhcnk6IFRCdXR0b25MaWJyYXJ5O1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQlVUVE9OUykgYnV0dG9uTGlicmFyeUNvbmZpZzogVEJ1dHRvbkxpYnJhcnlbXSkge1xuICAgIHRoaXMuX2J1dHRvbkxpYnJhcnkgPSBidXR0b25MaWJyYXJ5Q29uZmlnLnJlZHVjZSgoYWNjOiBUQnV0dG9uTGlicmFyeSwgdmFsOiBUQnV0dG9uTGlicmFyeSkgPT4gKHsgLi4uYWNjLCAuLi52YWwgfSksIHt9KTtcbiAgICB0aGlzLl9kZWZhdWx0QnV0dG9uc0xpc3QgPSBPYmplY3Qua2V5cyh0aGlzLl9idXR0b25MaWJyYXJ5KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRCdXR0b25zKGJ1dHRvbnM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGJ1dHRvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IFwiYnV0dG9uc1wiIHNob3VsZCBiZSBhbiBhcnJheScpO1xuICAgIH1cblxuICAgIHRoaXMuX2RlZmF1bHRCdXR0b25zTGlzdCA9IGJ1dHRvbnM7XG4gIH1cblxuICBwdWJsaWMgYWRkU3RhbmRhcmRCdXR0b24oXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgY29tbWFuZDogc3RyaW5nLFxuICAgIHN0eWxlQ2xhc3M6IHN0cmluZyxcbiAgICBpY29uOiBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKCFuYW1lIHx8ICF0aXRsZSB8fCAhY29tbWFuZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudHMgXCJuYW1lXCIsIFwidGl0bGVcIiBhbmQgXCJjb21tYW5kXCIgYXJlIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgc3R5bGVDbGFzcyA9IHN0eWxlQ2xhc3MgfHwgJyc7XG4gICAgdGhpcy5fYnV0dG9uTGlicmFyeVtuYW1lXSA9IHsgdGl0bGUsIGNvbW1hbmQsIHN0eWxlQ2xhc3MsIGljb24gfTtcbiAgICB0aGlzLl9kZWZhdWx0QnV0dG9uc0xpc3QucHVzaChuYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb29sYmFyQnV0dG9ucyhidXR0b25zTGlzdD86IHN0cmluZyk6IHt9W10ge1xuICAgIGxldCBidXR0b25zID0gdGhpcy5fZGVmYXVsdEJ1dHRvbnNMaXN0O1xuICAgIGNvbnN0IHRvb2xiYXJCdXR0b25zOiBUQnV0dG9uW10gPSBbXTtcblxuICAgIGlmICh0eXBlb2YgYnV0dG9uc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBidXR0b25zID0gc3RyaW5nMmFycmF5KGJ1dHRvbnNMaXN0KTtcbiAgICB9XG5cbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uS2V5ID0+IHtcbiAgICAgIGlmICghYnV0dG9uS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9idXR0b25MaWJyYXJ5W2J1dHRvbktleV0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBUaGVyZSBpcyBubyBcIiR7YnV0dG9uS2V5fVwiIGluIHlvdXIgbGlicmFyeS4gUG9zc2libGUgdmFyaWFudHM6ICR7T2JqZWN0LmtleXModGhpcy5fYnV0dG9uTGlicmFyeSl9YFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBidXR0b24gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9idXR0b25MaWJyYXJ5W2J1dHRvbktleV0pO1xuICAgICAgLy8gYnV0dG9uLmlzQWN0aXZlID0gKCkgPT4ge3JldHVybiAhIXRoaXMuY29tbWFuZCAmJiBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZSh0aGlzLmNvbW1hbmQpO31cbiAgICAgIHRvb2xiYXJCdXR0b25zLnB1c2goYnV0dG9uKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0b29sYmFyQnV0dG9ucztcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmcyYXJyYXkoa2V5c1N0cmluZzogc3RyaW5nKSB7XG4gIHJldHVybiBrZXlzU3RyaW5nXG4gICAgLnNwbGl0KCcsJylcbiAgICAubWFwKEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnRyaW0pO1xufVxuIl19